// Add this function to get a unique identifier for each bookmarked question
function getBookmarkKey(topicIndex, questionIndex) {
    return `${topicIndex}-${questionIndex}`;
}

// Modify the bookmarkQuestion function to include the topic index
function bookmarkQuestion(topicIndex, questionIndex) {
    const bookmarkedQuestions = getBookmarkedQuestions();
    const bookmarkKey = getBookmarkKey(topicIndex, questionIndex);
    const bookmarkButton = document.getElementById("bookmark-button");

    if (!bookmarkedQuestions.includes(bookmarkKey)) {
        bookmarkedQuestions.push(bookmarkKey);
        setBookmarkedQuestions(bookmarkedQuestions);
        bookmarkButton.textContent = "Bookmarked";
    } else {
        const indexToRemove = bookmarkedQuestions.indexOf(bookmarkKey);
        bookmarkedQuestions.splice(indexToRemove, 1);
        setBookmarkedQuestions(bookmarkedQuestions);
        bookmarkButton.textContent = "Bookmark";
    }
}

// Modify the showBookmarkedQuestions function to extract topic and question index
function showBookmarkedQuestions() {
    const bookmarkedQuestions = getBookmarkedQuestions();
    const bookmarkedQuestionsContainer = document.getElementById("bookmarked-questions-container");
    bookmarkedQuestionsContainer.innerHTML = "";

    if (bookmarkedQuestions.length > 0) {
        bookmarkedQuestions.forEach((bookmarkKey) => {
            const [topicIndex, questionIndex] = bookmarkKey.split('-').map(Number);
            const question = topics[topicIndex].questions[questionIndex];
            const questionDiv = document.createElement("div");
            questionDiv.innerHTML = `
                <p><strong>${topics[topicIndex].topic} - Question ${questionIndex + 1}:</strong> ${question.question}</p>
                <div id="options-container-${questionIndex}"></div>
                <button onclick="submitBookmarkedAnswer(${topicIndex}, ${questionIndex})">Submit Answer</button>
            `;
            bookmarkedQuestionsContainer.appendChild(questionDiv);

            // Display options for the question
            const optionsContainer = document.getElementById(`options-container-${questionIndex}`);
            question.options.forEach((option, index) => {
                const optionElement = document.createElement("div");
                optionElement.innerHTML = `
                    <input type="radio" name="bookmarked-option-${questionIndex}" value="${option}" id="bookmarked-option-${questionIndex}-${index}">
                    <label for="bookmarked-option-${questionIndex}-${index}">${option}</label>
                `;
                optionsContainer.appendChild(optionElement);
            });
        });
    } else {
        bookmarkedQuestionsContainer.textContent = "No questions bookmarked yet.";
    }

    hideAllLayers();
    document.getElementById("layer6").classList.add("active");
}

// Modify the submitBookmarkedAnswer function to include topic index
function submitBookmarkedAnswer(topicIndex, questionIndex) {
    const selectedOption = document.querySelector(`input[name="bookmarked-option-${questionIndex}"]:checked`);
    if (selectedOption) {
        const answer = selectedOption.value;
        const question = topics[topicIndex].questions[questionIndex];
        const correctOptionIndex = question.options.indexOf(question.correctOption);

        // Highlight the selected option
        selectedOption.parentElement.style.backgroundColor = answer === question.correctOption ? "lightgreen" : "pink";

        // Highlight the correct option
        const correctOptionElement = document.getElementById(`bookmarked-option-${questionIndex}-${correctOptionIndex}`);
        correctOptionElement.parentElement.style.backgroundColor = "lightgreen";

        console.log(`Submitted answer for ${topics[topicIndex].topic} - Question ${questionIndex + 1}: ${answer}`);
    } else {
        console.log(`No answer selected for ${topics[topicIndex].topic} - Question ${questionIndex + 1}`);
    }
}

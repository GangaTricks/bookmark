<a class="bookmarks"><span style='font-size:26px;'>â–¢ </span></a>  <!-- it is a navibar button and it also opens layer 6 to show all bookmarked questions -->

<!-- Add a new layer for displaying bookmarked questions -->
<div class="layer" id="layer6">
    <button class="gate" onclick="navigate('layer5')" style="font-size: 26px; text-align: left;">
        <span style='font-size: 26px;'>&#9194;</span> Previous
    </button>
    <h2>Bookmarked Questions</h2>
    <div id="bookmarked-questions-container"></div>
</div>




// Inside the displayQuestion() function in the JavaScript code
// Add a button to bookmark the current question
// Inside the displayQuestion() function in the JavaScript code
// Add a button to bookmark the current question
const bookmarkButton = document.createElement("button");
    bookmarkButton.textContent = getBookmarkedQuestions().includes(currentQuestionIndex) ? "Bookmarked" : "Bookmark";
    bookmarkButton.id = "bookmark-button"; // Add id to the button
    bookmarkButton.classList.add("btn", "btn-info", "mb-3"); // Add margin-bottom for spacing
    bookmarkButton.onclick = () => {
        bookmarkQuestion(currentQuestionIndex);
    };
    questionContainer.insertBefore(bookmarkButton, questionContainer.firstChild); // Insert before the question
}



// Add this function to handle bookmarking of questions
function bookmarkQuestion(questionIndex) {
    const bookmarkedQuestions = getBookmarkedQuestions();
    const bookmarkButton = document.getElementById("bookmark-button");

    if (!bookmarkedQuestions.includes(questionIndex)) {
        bookmarkedQuestions.push(questionIndex);
        setBookmarkedQuestions(bookmarkedQuestions);
        bookmarkButton.textContent = "Bookmarked"; // Update button text to "Bookmarked"
    } else {
        const indexToRemove = bookmarkedQuestions.indexOf(questionIndex);
        bookmarkedQuestions.splice(indexToRemove, 1);
        setBookmarkedQuestions(bookmarkedQuestions);
        bookmarkButton.textContent = "Bookmark"; // Update button text to "Bookmark"
    }
}







// Add this function to retrieve the bookmarked questions from the cookie
function getBookmarkedQuestions() {
    const bookmarkedQuestionsString = getCookie("bookmarkedQuestions");
    return bookmarkedQuestionsString ? JSON.parse(bookmarkedQuestionsString) : [];
}

// Add this function to set the bookmarked questions in the cookie
function setBookmarkedQuestions(bookmarkedQuestions) {
    setCookie("bookmarkedQuestions", JSON.stringify(bookmarkedQuestions));
}

// Add this function to get a cookie by name
function getCookie(name) {
    const cookies = document.cookie.split(';');
    for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();
        if (cookie.startsWith(name + '=')) {
            return cookie.substring(name.length + 1);
        }
    }
    return null;
}

// Add this function to set a cookie
function setCookie(name, value) {
    const expirationDate = new Date();
    expirationDate.setFullYear(expirationDate.getFullYear() + 1); // Set expiration to one year from now
    document.cookie = `${name}=${value}; expires=${expirationDate.toUTCString()}; path=/`;
}



function goToHome() {
    console.log("Going to home...");

    hideAllLayers();
    document.getElementById("layer1").classList.add("active");

    // Add a button to show the list of bookmarked questions
    const showBookmarksButton = document.createElement("button");
    showBookmarksButton.textContent = "Show Bookmarks";
    showBookmarksButton.classList.add("btn", "btn-primary");
    showBookmarksButton.onclick = () => {
        showBookmarkedQuestions();
    };
    document.querySelector(".bookmarks").appendChild(showBookmarksButton);

    console.log("Arrived at home.");
}

function showBookmarkedQuestions() {
    const bookmarkedQuestions = getBookmarkedQuestions();
    const bookmarkedQuestionsContainer = document.getElementById("bookmarked-questions-container");
    bookmarkedQuestionsContainer.innerHTML = ""; // Clear previous content

    if (bookmarkedQuestions.length > 0) {
        bookmarkedQuestions.forEach((questionIndex) => {
            const question = topics[currentTopicIndex].questions[questionIndex];
            const questionDiv = document.createElement("div");
            questionDiv.innerHTML = `
                <p><strong>Question ${questionIndex + 1}:</strong> ${question.question}</p>
                <div id="options-container-${questionIndex}"></div>
                <button onclick="submitBookmarkedAnswer(${questionIndex})">Submit Answer</button>
            `;
            bookmarkedQuestionsContainer.appendChild(questionDiv);

            // Display options for the question
            const optionsContainer = document.getElementById(`options-container-${questionIndex}`);
            question.options.forEach((option, index) => {
                const optionElement = document.createElement("div");
                optionElement.innerHTML = `
                    <input type="radio" name="bookmarked-option-${questionIndex}" value="${option}" id="bookmarked-option-${questionIndex}-${index}">
                    <label for="bookmarked-option-${questionIndex}-${index}">${option}</label>
                `;
                optionsContainer.appendChild(optionElement);
            });
        });
    } else {
        bookmarkedQuestionsContainer.textContent = "No questions bookmarked yet.";
    }

    // Hide all layers and show Layer 6
    hideAllLayers();
    document.getElementById("layer6").classList.add("active");
}

function submitBookmarkedAnswer(questionIndex) {
    const selectedOption = document.querySelector(`input[name="bookmarked-option-${questionIndex}"]:checked`);
    if (selectedOption) {
        const answer = selectedOption.value;
        const question = topics[currentTopicIndex].questions[questionIndex];
        const correctOptionIndex = question.options.indexOf(question.correctOption);

        // Highlight the selected option
        selectedOption.parentElement.style.backgroundColor = answer === question.correctOption ? "lightgreen" : "pink";

        // Highlight the correct option
        const correctOptionElement = document.getElementById(`bookmarked-option-${questionIndex}-${correctOptionIndex}`);
        correctOptionElement.parentElement.style.backgroundColor = "lightgreen";

        // Handle the submitted answer (e.g., store it, check correctness, etc.)
        console.log(`Submitted answer for Question ${questionIndex + 1}: ${answer}`);
    } else {
        console.log(`No answer selected for Question ${questionIndex + 1}`);
    }
}  




